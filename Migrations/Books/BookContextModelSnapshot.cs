// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using bookstore_api.Context;

#nullable disable

namespace bookstore_api.Migrations.Books
{
    [DbContext(typeof(BookContext))]
    partial class BookContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WebApplication1.Models.AccessInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessViewStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Embeddable")
                        .HasColumnType("bit");

                    b.Property<bool?>("PublicDomain")
                        .HasColumnType("bit");

                    b.Property<bool?>("QuoteSharingAllowed")
                        .HasColumnType("bit");

                    b.Property<string>("TextToSpeechPermission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Viewability")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebReaderLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccessInfo");
                });

            modelBuilder.Entity("WebApplication1.Models.BookData", b =>
                {
                    b.Property<Guid>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Etag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kind")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelfLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("WebApplication1.Models.Epub", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AcsTokenLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Epub");
                });

            modelBuilder.Entity("WebApplication1.Models.ImageLinks", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SmallThumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ImageLinks");
                });

            modelBuilder.Entity("WebApplication1.Models.ListPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<int?>("AmountInMicros")
                        .HasColumnType("int");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ListPrice");
                });

            modelBuilder.Entity("WebApplication1.Models.PanelizationSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("ContainsEpubBubbles")
                        .HasColumnType("bit");

                    b.Property<bool?>("ContainsImageBubbles")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("PanelizationSummary");
                });

            modelBuilder.Entity("WebApplication1.Models.Pdf", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AcsTokenLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Pdf");
                });

            modelBuilder.Entity("WebApplication1.Models.ReadingModes", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Image")
                        .HasColumnType("bit");

                    b.Property<bool?>("Text")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ReadingModes");
                });

            modelBuilder.Entity("WebApplication1.Models.RetailPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<int?>("AmountInMicros")
                        .HasColumnType("int");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RetailPrice");
                });

            modelBuilder.Entity("WebApplication1.Models.SaleInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BuyLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsEbook")
                        .HasColumnType("bit");

                    b.Property<string>("Saleability")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SaleInfo");
                });

            modelBuilder.Entity("WebApplication1.Models.SearchInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TextSnippet")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SearchInfo");
                });

            modelBuilder.Entity("WebApplication1.Models.VolumeInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("AllowAnonLogging")
                        .HasColumnType("bit");

                    b.Property<string>("Authors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("AverageRating")
                        .HasColumnType("float");

                    b.Property<string>("CanonicalVolumeLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Categories")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaturityRating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PageCount")
                        .HasColumnType("int");

                    b.Property<string>("PreviewLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrintType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublishedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Publisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RatingsCount")
                        .HasColumnType("int");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VolumeInfo");
                });

            modelBuilder.Entity("WebApplication1.Models.AccessInfo", b =>
                {
                    b.HasOne("WebApplication1.Models.BookData", "BookData")
                        .WithOne("AccessInfo")
                        .HasForeignKey("WebApplication1.Models.AccessInfo", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookData");
                });

            modelBuilder.Entity("WebApplication1.Models.Epub", b =>
                {
                    b.HasOne("WebApplication1.Models.AccessInfo", "AccessInfo")
                        .WithOne("Epub")
                        .HasForeignKey("WebApplication1.Models.Epub", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessInfo");
                });

            modelBuilder.Entity("WebApplication1.Models.ImageLinks", b =>
                {
                    b.HasOne("WebApplication1.Models.VolumeInfo", "VolumeInfo")
                        .WithOne("ImageLinks")
                        .HasForeignKey("WebApplication1.Models.ImageLinks", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VolumeInfo");
                });

            modelBuilder.Entity("WebApplication1.Models.ListPrice", b =>
                {
                    b.HasOne("WebApplication1.Models.SaleInfo", "SaleInfo")
                        .WithOne("ListPrice")
                        .HasForeignKey("WebApplication1.Models.ListPrice", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaleInfo");
                });

            modelBuilder.Entity("WebApplication1.Models.PanelizationSummary", b =>
                {
                    b.HasOne("WebApplication1.Models.VolumeInfo", "VolumeInfo")
                        .WithOne("PanelizationSummary")
                        .HasForeignKey("WebApplication1.Models.PanelizationSummary", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VolumeInfo");
                });

            modelBuilder.Entity("WebApplication1.Models.Pdf", b =>
                {
                    b.HasOne("WebApplication1.Models.AccessInfo", "AccessInfo")
                        .WithOne("Pdf")
                        .HasForeignKey("WebApplication1.Models.Pdf", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessInfo");
                });

            modelBuilder.Entity("WebApplication1.Models.ReadingModes", b =>
                {
                    b.HasOne("WebApplication1.Models.VolumeInfo", "VolumeInfo")
                        .WithOne("ReadingModes")
                        .HasForeignKey("WebApplication1.Models.ReadingModes", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VolumeInfo");
                });

            modelBuilder.Entity("WebApplication1.Models.RetailPrice", b =>
                {
                    b.HasOne("WebApplication1.Models.SaleInfo", "SaleInfo")
                        .WithOne("RetailPrice")
                        .HasForeignKey("WebApplication1.Models.RetailPrice", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaleInfo");
                });

            modelBuilder.Entity("WebApplication1.Models.SaleInfo", b =>
                {
                    b.HasOne("WebApplication1.Models.BookData", "BookData")
                        .WithOne("SaleInfo")
                        .HasForeignKey("WebApplication1.Models.SaleInfo", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookData");
                });

            modelBuilder.Entity("WebApplication1.Models.SearchInfo", b =>
                {
                    b.HasOne("WebApplication1.Models.BookData", "BookData")
                        .WithOne("SearchInfo")
                        .HasForeignKey("WebApplication1.Models.SearchInfo", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookData");
                });

            modelBuilder.Entity("WebApplication1.Models.VolumeInfo", b =>
                {
                    b.HasOne("WebApplication1.Models.BookData", "BookData")
                        .WithOne("VolumeInfo")
                        .HasForeignKey("WebApplication1.Models.VolumeInfo", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookData");
                });

            modelBuilder.Entity("WebApplication1.Models.AccessInfo", b =>
                {
                    b.Navigation("Epub");

                    b.Navigation("Pdf");
                });

            modelBuilder.Entity("WebApplication1.Models.BookData", b =>
                {
                    b.Navigation("AccessInfo");

                    b.Navigation("SaleInfo");

                    b.Navigation("SearchInfo");

                    b.Navigation("VolumeInfo");
                });

            modelBuilder.Entity("WebApplication1.Models.SaleInfo", b =>
                {
                    b.Navigation("ListPrice");

                    b.Navigation("RetailPrice");
                });

            modelBuilder.Entity("WebApplication1.Models.VolumeInfo", b =>
                {
                    b.Navigation("ImageLinks");

                    b.Navigation("PanelizationSummary");

                    b.Navigation("ReadingModes");
                });
#pragma warning restore 612, 618
        }
    }
}
